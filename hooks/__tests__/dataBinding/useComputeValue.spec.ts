// Generated by CodiumAI
import { useComputeValue } from "../../dataBinding/useComputeValue";

describe("useComputeValue", () => {
  // Computes dynamic value from shareableContent
  it("should compute dynamic value from shareableContent when fieldValue is dynamic", () => {
    // Mock the necessary dependencies
    const fieldValue = {
      dataType: "dynamic",
      dynamic: "exampleField",
    };
    const shareableContent = {
      data: {
        exampleField: "Example Value",
      },
    };

    // Invoke the function
    const result = useComputeValue({
      componentId: "exampleComponent",
      field: "exampleField",
      shareableContent,
      staticFallback: "Fallback Value",
    });

    // Assert the result
    expect(result).toBe("Example Value");
  });

  // fieldValue is null
  it("should return staticFallback when fieldValue is null", () => {
    // Mock the necessary dependencies
    const fieldValue = null;
    const shareableContent = {
      data: {
        exampleField: "Example Value",
      },
    };

    // Invoke the function
    const result = useComputeValue({
      componentId: "exampleComponent",
      field: "exampleField",
      shareableContent,
      staticFallback: "Fallback Value",
    });

    // Assert the result
    expect(result).toBe("Fallback Value");
  });

  // Computes static value from fieldValue or fallback
  it("should compute static value from fieldValue when fieldValue is static", () => {
    // Mock the necessary dependencies
    const fieldValue = {
      dataType: "static",
      static: "Example Value",
    };
    const shareableContent = {};

    // Invoke the function
    const result = useComputeValue({
      componentId: "exampleComponent",
      field: "exampleField",
      shareableContent,
      staticFallback: "Fallback Value",
    });

    // Assert the result
    expect(result).toBe("Example Value");
  });

  // Computes boundCode value from variables, inputs, browser, auth
  it("should compute boundCode value from variables, inputs, browser, and auth when fieldValue is boundCode", () => {
    // Mock the necessary dependencies
    const fieldValue = {
      dataType: "boundCode",
      boundCode:
        "variables['exampleVariable'] + components['exampleComponent'] + browser['exampleKey'] + auth['exampleAuth']",
    };
    const shareableContent = {};
    const variables = {
      exampleVariable: "Variable Value",
    };
    const inputs = {
      exampleComponent: "Input Value",
    };
    const browser = {
      exampleKey: "Browser Value",
    };
    const auth = {
      exampleAuth: "Auth Value",
    };

    // Invoke the function
    const result = useComputeValue({
      componentId: "exampleComponent",
      field: "exampleField",
      shareableContent,
      staticFallback: "Fallback Value",
    });

    // Assert the result
    expect(result).toBe("Variable ValueInput ValueBrowser ValueAuth Value");
  });

  // Returns staticFallback if fieldValue is undefined or null
  it("should return staticFallback when fieldValue is undefined", () => {
    // Mock the necessary dependencies
    const fieldValue = undefined;
    const shareableContent = {};

    // Invoke the function
    const result = useComputeValue({
      componentId: "exampleComponent",
      field: "exampleField",
      shareableContent,
      staticFallback: "Fallback Value",
    });

    // Assert the result
    expect(result).toBe("Fallback Value");
  });

  // Returns dynamic value if dataType is 'dynamic'
  it('should return dynamic value when dataType is "dynamic"', () => {
    // Mock the necessary dependencies
    const fieldValue = {
      dataType: "dynamic",
      dynamic: "exampleField",
    };
    const shareableContent = {
      data: {
        exampleField: "Example Value",
      },
    };

    // Invoke the function
    const result = useComputeValue({
      componentId: "exampleComponent",
      field: "exampleField",
      shareableContent,
      staticFallback: "Fallback Value",
    });

    // Assert the result
    expect(result).toBe("Example Value");
  });

  // Returns static value if dataType is 'static'
  it('should return static value when dataType is "static"', () => {
    // Mock the necessary dependencies
    const fieldValue = {
      dataType: "static",
      static: "Static Value",
    };
    const shareableContent = {};

    // Invoke the function
    const result = useComputeValue({
      componentId: "exampleComponent",
      field: "exampleField",
      shareableContent,
      staticFallback: "Fallback Value",
    });

    // Assert the result
    expect(result).toBe("Static Value");
  });

  // Returns boundCode value if dataType is 'boundCode'
  it('should return boundCode value when dataType is "boundCode"', () => {
    // Mock the necessary dependencies
    const fieldValue = {
      dataType: "boundCode",
      boundCode: "return 5 + 3;",
    };
    const shareableContent = {};

    // Invoke the function
    const result = useComputeValue({
      componentId: "exampleComponent",
      field: "exampleField",
      shareableContent,
      staticFallback: "Fallback Value",
    });

    // Assert the result
    expect(result).toBe(8);
  });

  // Returns undefined if boundCodeTransformed is undefined
  it("should return undefined when boundCodeTransformed is undefined", () => {
    // Mock the necessary dependencies
    const fieldValue = {
      dataType: "boundCode",
      boundCode: undefined,
    };
    const shareableContent = {};
    const staticFallback = "Fallback Value";

    // Invoke the function
    const result = useComputeValue({
      componentId: "exampleComponent",
      field: "exampleField",
      shareableContent,
      staticFallback,
    });

    // Assert the result
    expect(result).toBeUndefined();
  });

  // fieldValue is undefined
  it("should return staticFallback when fieldValue is undefined", () => {
    // Mock the necessary dependencies
    const fieldValue = undefined;
    const shareableContent = {};
    const staticFallback = "Fallback Value";

    // Invoke the function
    const result = useComputeValue({
      componentId: "exampleComponent",
      field: "exampleField",
      shareableContent,
      staticFallback,
    });

    // Assert the result
    expect(result).toBe(staticFallback);
  });

  // fieldValue is an empty object
  it("should return staticFallback when fieldValue is an empty object", () => {
    // Mock the necessary dependencies
    const fieldValue = {};
    const shareableContent = {};
    const staticFallback = "Fallback Value";

    // Invoke the function
    const result = useComputeValue({
      componentId: "exampleComponent",
      field: "exampleField",
      shareableContent,
      staticFallback,
    });

    // Assert the result
    expect(result).toBe(staticFallback);
  });
});
